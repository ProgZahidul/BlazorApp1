public class Product
{
	[Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
	public int ProductID { get; set; }
	[Required]
	[StringLength(50, MinimumLength = 4)]
	public string Name { get; set; }
	public string ProductNumber { get; set; }
	public string Color { get; set; }
	public DateTime? MFD { get; set; }
	public decimal StandardCost { get; set; }
	public decimal ListPrice { get; set; }
	public int Size { get; set; }
	public decimal Weight { get; set; }
	public int ProductCategoryID { get; set; }
	public bool Available { get; set; }
	
	public ProductCategory? ProductCategory { get; set; }

}
public class ProductCategory
{
	[Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]

	public int ProductCategoryID { get; set; }

	[Required, NotNull]
	[StringLength(50, MinimumLength = 4)]
	public string Name { get; set; }

	public ICollection<Product> Products { get; set; } = [];
}
-------------------------
public class ProductDb : DbContext
{
	public DbSet<ProductCategory> ProductCategory { get; set; }
	public DbSet<Product> Product { get; set; } 
	public ProductDb(DbContextOptions options)
	   : base(options)
	{
	}
}
---------------------------
public class ProductSevice
{

	private readonly HttpClient http;

	private string apiLink = "/api/ProductCategories";

	public ProductSevice(HttpClient http, NavigationManager nav)
	{
		http.BaseAddress = new Uri(nav.BaseUri);
		this.http = http;
	}

	public async Task<IList<ProductCategory>?> GetAll()
	{
		var data = await this.http.GetFromJsonAsync<IList<ProductCategory>>(apiLink);
		return data;
	}
	public async Task<ProductCategory?> GetById(int id)
	{
		return await this.http.GetFromJsonAsync<ProductCategory>(apiLink + $"/{id}");
	}
	public async Task<HttpResponseMessage?> Save(ProductCategory data)
	{
		return await this.http.PostAsJsonAsync<ProductCategory>(apiLink, data);
	}
	public async Task<HttpResponseMessage?> Update(ProductCategory data)
	{
		return await this.http.PutAsJsonAsync<ProductCategory>(apiLink + $"/{data.ProductCategoryID}", data);
	}

	public async Task<HttpResponseMessage?> Delete(int id)
	{
		return await this.http.DeleteAsync(apiLink + $"/{id}");
	}
}
----------------------------
ProgramCS server
**************

			builder.Services.AddDbContext<ProductDb>(opt =>
			opt.UseSqlServer(@"Server=(localdb)\mssqllocaldb;Database=ProductsDB2;Trusted_Connection=True")
			);
			builder.Services.AddControllers().AddJsonOptions(options =>
			{
				options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
			});
			builder.Services.AddHttpClient<ProductSevice>();

====
app.MapControllers();
-------------------------------
// GET: api/ProductCategories
[HttpGet]
public async Task<ActionResult<IEnumerable<ProductCategory>>> GetProductCategory()
{
	return await _context.ProductCategory.Include(c => c.Products).ToListAsync();
}

// GET: api/ProductCategories/5
[HttpGet("{id}")]
public async Task<ActionResult<ProductCategory>> GetProductCategory(int id)
{
	var productCategory = await _context.ProductCategory.Include(c => c.Products).FirstOrDefaultAsync(c => c.ProductCategoryID == id);

	if (productCategory == null)
	{
		return NotFound();
	}

	return productCategory;
}
---------------------------------
@using ProductCat.Models
@using BlazorApp1.Client.Pages
@using BlazorApp1.Client.Services
-----------------------------
CategoryList.razor

﻿@inject IJSRuntime js
@rendermode InteractiveWebAssembly
@inject ProductSevice service
@page "/cat"

<h3>CategoryList</h3>
<NavLink class="nav-link" href="add">Add</NavLink>
<br />
<hr />
<table class="table table-responsive table-striped table-hover">
	<thead>
		<tr>
			<th>ID</th>
			<th>Name</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var cat in data)
		{
			<tr>
				<td>@cat.ProductCategoryID</td>
				<td>@cat.Name</td>
				<td>
					<ol>
						@foreach (var product in cat.Products)
						{
							<li>
								<dl>
									<dt>Name</dt>
									<dd>@product.Name</dd>
									<dt>Number</dt>
									<dd>@product.ProductNumber</dd>
									<dt>Color</dt>
									<dd>@product.Color</dd>
									<dt>Date</dt>
									<dd>
										@product.MFD?.ToString("dd-MMM-yyyy")
									</dd>
									<dt>Available?</dt>
									<dd>
										<InputCheckbox readonly @bind-Value="@product.Available" />
									</dd>
								</dl>
							</li>
						}
					</ol>
				</td>
				<td class="btn-group">
					<a class="nav-link btn btn-outline-info" href="/edit/@cat.ProductCategoryID">Edit</a>
					<button class="btn btn-outline-danger" @onclick="()=> DeleteData(cat)">
						Delete
					</button>
				</td>
			</tr>
		}
	</tbody>
</table>

@code {

	private IList<ProductCategory>? data = new List<ProductCategory>();
	
	protected override async Task OnInitializedAsync()
	{

		await loadData();

	}

	async Task loadData()
	{
		this.data = await this.service.GetAll();
	}

	async Task DeleteData(ProductCategory category)
	{
		var confirm = await js.InvokeAsync<bool>("confirm", $"delete data of {category.Name}?");

		if (!confirm) return;


		var result = await this.service.Delete(category.ProductCategoryID);

		if (result.IsSuccessStatusCode)
		{
			await loadData();
		}
	}
}
-----------------------
CategoryAdd.razor

﻿@page "/add"
@rendermode InteractiveWebAssembly
@inject ProductSevice service
@inject NavigationManager nav

<h3>CategoryAdd</h3>

<EditForm Model="model" OnValidSubmit="SaveData">
	<DataAnnotationsValidator />
	<ValidationSummary />
	@if (!string.IsNullOrEmpty(message))
	{
		<span class="text-danger text-lg-center">@message</span>
	}
	<div>
		<label for="name">Name:</label>
		<InputText id="name" class="form-control" required @bind-Value="model.Name" />
		<ValidationMessage For="()=> model.Name" />
	</div>

	<table class="table table-active table-bordered table-hover">
		<tr>
			<th>Product Name</th>
			<th>Product Number</th>
			<th>Color</th>
			<th>MFD</th>
			<th>Standard Cost</th>
			<th>List Price</th>
			<th>Size</th>
			<th>Weight</th>
			<th>Available?</th>
			<th>
				<button type="button" class="btn btn-outline-info" @onclick="AddProduct">Add Product</button>
			</th>
		</tr>
		@foreach (var prod in model.Products)
		{
			<tr>
				<td>
					<InputText  class="form-control" @bind-Value="prod.Name" />
					<ValidationMessage For="()=> prod.Name" />
				</td>
				<td>
					<InputText class="form-control" @bind-Value="prod.ProductNumber" />
					<ValidationMessage For="()=> prod.ProductNumber" />
				</td>
				<td>
					<InputText  class="form-control" @bind-Value="prod.Color" />
					<ValidationMessage For="()=> prod.Color" />
				</td>
				<td>
					<InputDate  @bind-Value="prod.MFD" />
					<ValidationMessage For="()=> prod.MFD" />
				</td>
				<td>
					<InputNumber  class="form-control" @bind-Value="prod.StandardCost" />
					<ValidationMessage For="()=> prod.StandardCost" />
				</td>
				<td>
					<InputNumber class="form-control" @bind-Value="prod.ListPrice" />
					<ValidationMessage For="()=> prod.ListPrice" />
				</td>

				<td>
					<InputNumber class="form-control" @bind-Value="prod.Size" />
					<ValidationMessage For="()=> prod.Size" />
				</td>

				<td>
					<InputNumber class="form-control" @bind-Value="prod.Weight" />
					<ValidationMessage For="()=> prod.Weight" />
				</td>
				<td>
					<InputCheckbox  @bind-Value="prod.Available" />
					<ValidationMessage For="()=> prod.Available" />
				</td>
				<td>
					<button type="button" class="btn btn-outline-warning" @onclick="()=> DeleteProduct(prod)">Delete</button>
				</td>
			</tr>
		}
	</table>

	<button type="submit" class="btn btn-outline-success">
		Save
	</button>
	<NavLink class="btn btn-outline-info" href="cat">
		Cancel
	</NavLink>
</EditForm>

@code {

	private ProductCategory model = new ProductCategory();
	int index = 0;
	string? message;

	public async Task SaveData()
	{
		var response = await service.Save(model);

		if (response.IsSuccessStatusCode)
		{
			nav.NavigateTo("/cat");
		}
		else
		{
			this.message = response.ReasonPhrase;
		}
	}

	private void AddProduct()
	{
		model.Products?.Add(new Product());
	}
	private void DeleteProduct(Product item)
	{
		model.Products?.Remove(item);
	}
}
-----------------------
CategoryEdit.razor

﻿@page "/edit/{catId:int}"
@rendermode InteractiveWebAssembly
@inject ProductSevice service
@inject NavigationManager nav
@inject IJSRuntime JS


<EditForm Model="model" OnValidSubmit="SaveData">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div>
		<label for="name">Name:</label>
		<InputText id="name" class="form-control" required @bind-Value="model.Name" />
		<ValidationMessage For="()=> model.Name" />
	</div>

	<table class="table table-active table-bordered table-hover">
		<tr>
			<th>Product Name</th>
			<th>Product Number</th>
			<th>Color</th>
			<th>MFD</th>
			<th>Standard Cost</th>
			<th>List Price</th>
			<th>Size</th>
			<th>Weight</th>
			<th>Available?</th>
			<th>
				<button type="button" class="btn btn-outline-info" @onclick="AddProduct">Add Product</button>
			</th>
		</tr>
		@foreach (var prod in model.Products)
		{
			<tr>
				<td>
					<InputText class="form-control" @bind-Value="prod.Name" />
					<ValidationMessage For="()=> prod.Name" />
				</td>
				<td>
					<InputText class="form-control" @bind-Value="prod.ProductNumber" />
					<ValidationMessage For="()=> prod.ProductNumber" />
				</td>
				<td>
					<InputText class="form-control" @bind-Value="prod.Color" />
					<ValidationMessage For="()=> prod.Color" />
				</td>
				<td>
					<InputDate @bind-Value="prod.MFD" />
					<ValidationMessage For="()=> prod.MFD" />
				</td>
				<td>
					<InputNumber class="form-control" @bind-Value="prod.StandardCost" />
					<ValidationMessage For="()=> prod.StandardCost" />
				</td>
				<td>
					<InputNumber class="form-control" @bind-Value="prod.ListPrice" />
					<ValidationMessage For="()=> prod.ListPrice" />
				</td>

				<td>
					<InputNumber class="form-control" @bind-Value="prod.Size" />
					<ValidationMessage For="()=> prod.Size" />
				</td>

				<td>
					<InputNumber class="form-control" @bind-Value="prod.Weight" />
					<ValidationMessage For="()=> prod.Weight" />
				</td>
				<td>
					<InputCheckbox @bind-Value="prod.Available" />
					<ValidationMessage For="()=> prod.Available" />
				</td>
				<td>
					<button type="button" class="btn btn-outline-warning" @onclick="()=> DeleteProduct(prod)">Delete</button>
				</td>
			</tr>


		}
	</table>

	<button type="submit" class="btn btn-outline-success">
		Save
	</button>
	<button type="button" class="btn btn-outline-danger" @onclick="DataDelete">
		Delete
	</button>
	<NavLink class="btn btn-outline-info" href="cat">
		Cancel
	</NavLink>
</EditForm>

@code {

	[Parameter]
	public int catId { get; set; }

	private ProductCategory model = new ProductCategory();

	protected override async Task OnInitializedAsync()
	{
		this.model = await this.service.GetById(catId);

		await base.OnInitializedAsync();
	}

	public async Task SaveData()
	{
		var response = await service.Update(model);

		if (response.IsSuccessStatusCode)
		{
			nav.NavigateTo("/cat");
		}
	}

	void AddProduct()
	{
		model.Products?.Add(new Product());
	}
	void DeleteProduct(Product item)
	{
		model.Products?.Remove(item);

	}

	async Task DataDelete()
	{
		var response = await service.Delete(catId);

		if (response.IsSuccessStatusCode)
		{
			nav.NavigateTo("/cat");
		}
	}
}
-------------------------
<div class="nav-item px-3">
    <NavLink class="nav-link" href="cat">
        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Products
    </NavLink>
</div>